{"ast":null,"code":"const APIURL = '/api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          //resp.json will be the error message\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later. Server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    //the default method is get\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          //resp.json will be the error message\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later. Server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function removeTodo(id) {\n  const deleteUrl = APIURL + id;\n  return fetch(deleteUrl, {\n    method: 'delete' //the default method is get\n\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          //resp.json will be the error message\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later. Server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function updateTodo(todo) {\n  const updateUrl = APIURL + todo._id;\n  return fetch(updateUrl, {\n    method: 'put',\n    //the default method is get\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      completed: !todo.completed\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          //resp.json will be the error message\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please try again later. Server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}","map":{"version":3,"sources":["/Users/deepaligarg/Documents/ADVANCED WEB DEVELOPER BOOTCAMP/Full-Stack-MERN-TO-DO/src/api.js"],"names":["APIURL","getTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","createTodo","val","method","headers","Headers","body","JSON","stringify","name","removeTodo","id","deleteUrl","updateTodo","todo","updateUrl","_id","completed"],"mappings":"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","sourcesContent":["const APIURL = '/api/todos/';\n\nexport async function getTodos() {\n  return fetch(APIURL)\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n}\n\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post', //the default method is get\n    headers: new Headers({\n      'Content-Type': 'application/json',\n    }),\n    body: JSON.stringify({name: val})\n  })\n  .then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {     //resp.json will be the error message\n          let err = {errorMessage: data.message};\n          throw err;\n        })\n      } else {\n        let err = {errorMessage: 'Please try again later. Server is not responding'};\n        throw err;\n      }\n    }\n    return resp.json()    \n  })\n}\n\nexport async function removeTodo(id) {\n  const deleteUrl = APIURL + id;\n  return fetch(deleteUrl, {\n      method: 'delete', //the default method is get\n    })\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n}\n\nexport async function updateTodo(todo) {\n  const updateUrl = APIURL + todo._id;\n  return fetch(updateUrl, {\n      method: 'put', //the default method is get\n      headers: new Headers({\n        'Content-Type': 'application/json',\n      }),\n      body: JSON.stringify({completed:!todo.completed})\n    })\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n}"]},"metadata":{},"sourceType":"module"}