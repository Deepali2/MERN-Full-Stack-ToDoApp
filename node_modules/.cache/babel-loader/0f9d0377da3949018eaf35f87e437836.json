{"ast":null,"code":"var _jsxFileName = \"/Users/deepaligarg/Documents/ADVANCED WEB DEVELOPER BOOTCAMP/Full-Stack-MERN-TO-DO/reactTodo/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    fetch(APIURL).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            //resp.json will be the error message\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later. Server is not responding'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(todos => this.setState({\n      todos\n    }));\n  }\n\n  addTodo(val) {\n    fetch(APIURL, {\n      method: 'post',\n      //the default method is get\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        name: val\n      })\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            //resp.json will be the error message\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later. Server is not responding'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(newTodo => {\n      this.setState({\n        todos: [...this.state.todos, newTodo]\n      });\n    });\n  }\n\n  deleteTodo(id) {\n    const deleteUrl = APIURL + id;\n    fetch(deleteUrl, {\n      method: 'delete' //the default method is get\n\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            //resp.json will be the error message\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later. Server is not responding'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  toggleTodo(todo) {\n    const deleteUrl = APIURL + todo._id;\n    fetch(deleteUrl, {\n      method: 'delete' //the default method is get\n\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            //resp.json will be the error message\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Please try again later. Server is not responding'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      onDelete: this.deleteTodo.bind(this, t._id) //must be bound here and not on top since id has to be passed in\n      ,\n      onToggle: this.toggleTodo.bind(this, t),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Todo List\"), React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/deepaligarg/Documents/ADVANCED WEB DEVELOPER BOOTCAMP/Full-Stack-MERN-TO-DO/reactTodo/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","setState","val","method","headers","Headers","body","JSON","stringify","name","newTodo","deleteTodo","id","deleteUrl","filter","todo","_id","toggleTodo","render","map","t"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component{\n  constructor(props) {\n    super(props);\n    this.state= {\n      todos:[]\n    }\n    this.addTodo = this.addTodo.bind(this);\n  }\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    fetch(APIURL)\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n    .then(todos => this.setState({todos}));\n  }\n  \n  addTodo(val) {\n    fetch(APIURL, {\n      method: 'post', //the default method is get\n      headers: new Headers({\n        'Content-Type': 'application/json',\n      }),\n      body: JSON.stringify({name: val})\n    })\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n    .then(newTodo => {\n      this.setState({\n        todos: [...this.state.todos, newTodo]\n      })\n    })\n  }\n\n  deleteTodo(id) {\n    const deleteUrl = APIURL + id;\n    fetch(deleteUrl, {\n      method: 'delete', //the default method is get\n    })\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n    .then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    })\n  }\n\n  toggleTodo(todo) {\n    const deleteUrl = APIURL + todo._id;\n    fetch(deleteUrl, {\n      method: 'delete', //the default method is get\n    })\n    .then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {     //resp.json will be the error message\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Please try again later. Server is not responding'};\n          throw err;\n        }\n      }\n      return resp.json()    \n    })\n    .then(() => {\n      const todos = this.state.todos.filter(todo => todo._id !== id);\n      this.setState({\n        todos: todos\n      });\n    })\n  }\n\n  render (){\n    const todos = this.state.todos.map(t => (\n      <TodoItem \n        key={t._id}\n        {...t}\n        onDelete={this.deleteTodo.bind(this, t._id)} //must be bound here and not on top since id has to be passed in\n        onToggle={this.toggleTodo.bind(this, t)}\n      />\n    ));\n    return(\n      <div>\n         <h1>Todo List</h1>\n         <TodoForm addTodo={this.addTodo}/>\n         <ul>{todos}</ul>        \n       </div>\n    );\n  }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}